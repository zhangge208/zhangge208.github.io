<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ant</title><link href="http://www.zhangge208.com/" rel="alternate"></link><link href="http://www.zhangge208.com/feeds/algorithm-string-math.atom.xml" rel="self"></link><id>http://www.zhangge208.com/</id><updated>2015-10-29T00:00:00+08:00</updated><entry><title>Roman to Integer</title><link href="http://www.zhangge208.com/pages/2015/10/29/roman-to-integer.html" rel="alternate"></link><updated>2015-10-29T00:00:00+08:00</updated><author><name>zhangge208</name></author><id>tag:www.zhangge208.com,2015-10-29:pages/2015/10/29/roman-to-integer.html</id><summary type="html">&lt;hr /&gt;
&lt;h1&gt;Roman to Integer&lt;/h1&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given a roman numeral, convert it to an integer.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public class Solution {
    public int romanToInt(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        Map&amp;lt;Character, Integer&amp;gt; map = new HashMap&amp;lt;Character, Integer&amp;gt;();
        map.put(&amp;#39;I&amp;#39;,1);
        map.put(&amp;#39;V&amp;#39;,5);
        map.put(&amp;#39;X&amp;#39;,10);
        map.put(&amp;#39;L&amp;#39;,50);
        map.put(&amp;#39;C&amp;#39;,100);
        map.put(&amp;#39;D&amp;#39;,500);
        map.put(&amp;#39;M&amp;#39;,1000);
        int result = map.get(s.charAt(s.length() - 1)) ;
        for (int i = s.length() - 1; i &amp;gt;= 1 ; i--) {
            if (map.get(s.charAt(i - 1)) &amp;gt;= map.get(s.charAt(i))) {
                result += map.get(s.charAt(i - 1));
            }
            else {
                result -= map.get(s.charAt(i - 1));
            }

        }
        return result;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Solution and Analysis&lt;/h2&gt;
&lt;p&gt;It`s boring so long as you know the rule that how to convert roman numeral to an integer.&lt;/p&gt;
&lt;p&gt;The base:&lt;/p&gt;
&lt;p&gt;I = 1&lt;/p&gt;
&lt;p&gt;V = 5&lt;/p&gt;
&lt;p&gt;X = 10&lt;/p&gt;
&lt;p&gt;L = 50&lt;/p&gt;
&lt;p&gt;C = 100&lt;/p&gt;
&lt;p&gt;D = 500&lt;/p&gt;
&lt;p&gt;M = 1000&lt;/p&gt;
&lt;p&gt;So we need create a map to store key-value&lt;Character, Integer&gt;.&lt;/p&gt;
&lt;p&gt;Rule:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a lower value symbol is before a higher value one, it is subtracted. Otherwise it is added &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Order: Right to left&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Algorithm String &amp; Math"></category></entry><entry><title>String to Integer (atoi)</title><link href="http://www.zhangge208.com/pages/2015/10/29/string-to-integer-atoi.html" rel="alternate"></link><updated>2015-10-29T00:00:00+08:00</updated><author><name>zhangge208</name></author><id>tag:www.zhangge208.com,2015-10-29:pages/2015/10/29/string-to-integer-atoi.html</id><summary type="html">&lt;hr /&gt;
&lt;h1&gt;String to Integer (atoi)&lt;/h1&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Implement atoi to convert a string to an integer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public class Solution {
    public int myAtoi(String str) {
        if (str == null || str.length() == 0) {
            return 0;
        }
        str = str.trim();
        int sign = 1;
        int index = 0;

        if (str.charAt(index) == &amp;#39;+&amp;#39;) {
            index++;
        }
        else if (str.charAt(index) == &amp;#39;-&amp;#39;) {
            sign = -1;
            index++;
        }
        long  num = 0;

        for(int i = index; i &amp;lt; str.length(); i++) {
            if (str.charAt(i) &amp;lt; &amp;#39;0&amp;#39; || str.charAt(i) &amp;gt; &amp;#39;9&amp;#39;)
                break;
            num = num * 10 + str.charAt(i) - &amp;#39;0&amp;#39;;

            if (num &amp;gt; Integer.MAX_VALUE) {
                break;
            }
        }

        if (num * sign &amp;lt; Integer.MIN_VALUE) {
            return  Integer.MIN_VALUE;
        }    
        if (num * sign &amp;gt; Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }

        return (int) num * sign;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Solution and Analysis&lt;/h2&gt;
&lt;p&gt;There are some points we should focus as belowï¼š&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The function first discards as many whitespace characters as necessary until the first non-whitespace character is found.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Algorithm String &amp; Math"></category></entry></feed>