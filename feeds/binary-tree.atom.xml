<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ant</title><link href="http://www.zhangge208.com/" rel="alternate"></link><link href="http://www.zhangge208.com/feeds/binary-tree.atom.xml" rel="self"></link><id>http://www.zhangge208.com/</id><updated>2015-12-15T00:00:00+08:00</updated><entry><title>Binary Tree</title><link href="http://www.zhangge208.com/pages/2015/12/15/binary-tree.html" rel="alternate"></link><updated>2015-12-15T00:00:00+08:00</updated><author><name>zhangge208</name></author><id>tag:www.zhangge208.com,2015-12-15:pages/2015/12/15/binary-tree.html</id><summary type="html">&lt;hr /&gt;
&lt;h1&gt;Binary Tree&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;讲义的思路为参加&lt;a href="http://www.jiuzhang.com"&gt;九章算法&lt;/a&gt;培训学习，部分代码、模板均有所参考&lt;/p&gt;
&lt;p&gt;特别感谢前辈：&lt;a href="http://www.shuatiblog.com/"&gt;http://www.shuatiblog.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Outline&lt;/h2&gt;
&lt;p&gt;1.Binary Tree DFS Traversal&lt;/p&gt;
&lt;p&gt;-preorder/inorder/postorder&lt;/p&gt;
&lt;p&gt;-Divide &amp;amp; Conquer&lt;/p&gt;
&lt;p&gt;-DFS Template&lt;/p&gt;
&lt;p&gt;2.Binary Tree BFS Traversal&lt;/p&gt;
&lt;p&gt;-BFS Template&lt;/p&gt;
&lt;p&gt;3.Binary Search Tree&lt;/p&gt;
&lt;h2&gt;Binary Tree DFS Traversal&lt;/h2&gt;
&lt;h3&gt;三种基本遍历方法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    A
   / \
  B   C
 / \  
D   E
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前序(Preorder)：A BDE C&lt;/p&gt;
&lt;p&gt;中序(Inorder)：DBE A C&lt;/p&gt;
&lt;p&gt;后序(Postorder)：DEB C A&lt;/p&gt;
&lt;h3&gt;递归 or 非递归？&lt;/h3&gt;
&lt;p&gt;递归的办法会很简单，一般来说不推荐，然而，Done is better than Perfect！&lt;/p&gt;
&lt;h3&gt;Divide &amp;amp; Conquer Algorithm&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Merge Sort&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick Sort&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;适用于大多数的Binary Tree Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分治法对于二叉树问题，进行如下的操作：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;Divide&lt;/strong&gt;：对于左右子树分别去同时处理，将原问题划分成为更小的子问题&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;Conquer&lt;/strong&gt;：将子问题的解合并，返回问题的解&lt;/p&gt;
&lt;h3&gt;Binary Tree DFS Template&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Template 1:Traverse

public class Solution {
    public void traverse(TreeNode root) {
        if (root == null) {
            return ;
        }
    //do something with root
    traverse(root.left);
    //do something with root
    traverse(root.right);
    //do something with root
    }
}

Template 2:Divide &amp;amp; Conquer

public class Solution {
    public ResultType traversal(TreeNode root) {
        // null or leaf
        if (root = null) {
            //do something and return;
        }

        //Divide
        ResultType left = traversal(root.left);
        ResultType right = traversal(root.right);

        //Conquer
        ResultType result = Merge from left and right;
        return result;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Problem List&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Traversal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http:"&gt;Binary Tree Preorder Traversal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http:"&gt;Binary Tree Inorder Traversal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http:"&gt;Binary Tree Postorder Traversal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Divide &amp;amp; Conquer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http:"&gt;Maximum Depth of Binary Tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http:"&gt;Minimum Depth of Binary Tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http:"&gt;Balanced Binary Tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http:"&gt;Binary Tree Maximum Path Sum&lt;/a&gt; – &lt;strong&gt;the most important question&lt;/strong&gt; &lt;/p&gt;</summary><category term="Algorithm Binary Tree"></category></entry><entry><title>Binary Tree Inorder Traversal</title><link href="http://www.zhangge208.com/pages/2015/12/15/binary-tree-inorder-traversal.html" rel="alternate"></link><updated>2015-12-15T00:00:00+08:00</updated><author><name>zhangge208</name></author><id>tag:www.zhangge208.com,2015-12-15:pages/2015/12/15/binary-tree-inorder-traversal.html</id><summary type="html">&lt;hr /&gt;
&lt;h1&gt;Binary Tree Inorder Traversal&lt;/h1&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given a binary tree, return the inorder traversal of its nodes' values.&lt;/p&gt;
&lt;p&gt;For example:
Given binary tree {1,#,2,3},&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   1
    \
     2
    /
   3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;return [1,3,2].&lt;/p&gt;
&lt;p&gt;Note: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;version 1：Non-recursion（recommended）
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; inorderTraversal(TreeNode root) {
        Stack&amp;lt;TreeNode&amp;gt; stack = new Stack&amp;lt;TreeNode&amp;gt;();
        List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
        TreeNode cur = root;
        while (cur != null || !stack.empty()){
            while(cur != null){
                stack.push(cur);
                cur = cur.left;
            }
            cur = stack.pop();
            result.add(cur.val);
            cur = cur.right;

        }
        return result;
    }
}

version 2：Traversal
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; inorderTraversal(TreeNode root) {
        List&amp;lt;Integer&amp;gt; inorderTraversal = new ArrayList&amp;lt;Integer&amp;gt;();
        traversal(root,inorderTraversal);
        return inorderTraversal;
    }
    private void traversal(TreeNode root,List&amp;lt;Integer&amp;gt; result){
        if (root == null){
            return;
        }

        traversal(root.left,result);
        result.add(root.val);
        traversal(root.right,result);

    }
}

version 3：Divide &amp;amp; Conquer
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; inorderTraversal(TreeNode root) {
        List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
        if (root == null){
            return result;
        }
        //Divide &amp;amp; Conquer

        //Divide
        List&amp;lt;Integer&amp;gt; left = inorderTraversal(root.left);
        List&amp;lt;Integer&amp;gt; right = inorderTraversal(root.right);
        //Conquer
        result.addAll(left);
        result.add(root.val);
        result.addAll(right);

        return result;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Solution and Analysis&lt;/h2&gt;
&lt;p&gt;三种做法：1.非递归（推荐） 2.递归：遍历 3.递归：分治法&lt;/p&gt;
&lt;h3&gt;非递归&lt;/h3&gt;
&lt;p&gt;运用栈和迭代。值得注意的是，入栈的先后顺序，栈是先入后出的数据结构，为保证是中序遍历，首先需要对左子树进行迭代并将非空节点入栈，直到节点为空，当前节点为空时进行出栈操作，并访问栈顶节点，将当前节点用右子节点代替。&lt;/p&gt;
&lt;h3&gt;递归：遍历&lt;/h3&gt;
&lt;p&gt;运用遍历的方法&lt;/p&gt;
&lt;p&gt;先左再中最后右&lt;/p&gt;
&lt;h3&gt;递归：分治法&lt;/h3&gt;
&lt;p&gt;运用分治法，这是大多数树问题均可使用的办法&lt;/p&gt;
&lt;p&gt;分为左子树和右子树，不断地减小问题的规模&lt;/p&gt;</summary><category term="Algorithm Binary Tree"></category></entry><entry><title>Binary Tree Postorder Traversal</title><link href="http://www.zhangge208.com/pages/2015/12/15/binary-tree-postorder-traversal.html" rel="alternate"></link><updated>2015-12-15T00:00:00+08:00</updated><author><name>zhangge208</name></author><id>tag:www.zhangge208.com,2015-12-15:pages/2015/12/15/binary-tree-postorder-traversal.html</id><summary type="html">&lt;hr /&gt;
&lt;h1&gt;Binary Tree Postorder Traversal&lt;/h1&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given a binary tree, return the postorder traversal of its nodes' values.&lt;/p&gt;
&lt;p&gt;For example:
Given binary tree {1,#,2,3},&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   1
    \
     2
    /
   3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;return [1,3,2].&lt;/p&gt;
&lt;p&gt;Note: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;version 1：Non-recursion（recommended）
a) using two stacks
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; postorderTraversal(TreeNode root) {
        Stack&amp;lt;TreeNode&amp;gt; s1 = new Stack&amp;lt;TreeNode&amp;gt;();
        Stack&amp;lt;TreeNode&amp;gt; s2 = new Stack&amp;lt;TreeNode&amp;gt;();
        List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
        if(root == null) {
            return result;
        }
        s1.push(root);
        while (!s1.empty()){
            TreeNode node = s1.pop();
            s2.push(node);
            if(node.left != null) {
                s1.push(node.left);
            }
            if(node.right != null) {
                s1.push(node.right);
            }
        }

        while(!s2.isEmpty()) {
            TreeNode cur = s2.pop();
            result.add(cur.val);
        }
        return result;
    } 
}

b) using one stack
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; postorderTraversal(TreeNode root) {
        Stack&amp;lt;TreeNode&amp;gt; s1 = new Stack&amp;lt;TreeNode&amp;gt;();
        List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
        if(root == null) {
            return result;
        }

        TreeNode cur = root;
        do {
            while (cur != null) {
                if (cur.right != null){
                    s1.push(cur.right);  
                }

                s1.push(cur);
                cur = cur.left;
            }
            cur = s1.pop();
            if (!s1.isEmpty() &amp;amp;&amp;amp; cur.right != null &amp;amp;&amp;amp; cur.right == s1.peek()) {
                TreeNode node = s1.pop();
                s1.push(cur);
                cur = node;
            }
            else {
                result.add(cur.val);  
                cur = null;
            }
        } while (!s1.empty());   
        return result;
    } 
}

version 2：Traversal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; postorderTraversal(TreeNode root) {
        List&amp;lt;Integer&amp;gt; postorder = new ArrayList&amp;lt;Integer&amp;gt;();
        traversal(root,postorder);
        return postorder;
    }
    private void traversal(TreeNode root, List&amp;lt;Integer&amp;gt; postorder){
        if (root == null){
            return ;
        }
    traversal(root.left,postorder);
    traversal(root.right,postorder);
    postorder.add(root.val);
    }
}

version 3：Divide &amp;amp; Conquer
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; postorderTraversal(TreeNode root) {
        List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
        if (root == null){
            return result;
        }
        //Divide &amp;amp; Conquer

        //Divide
        List&amp;lt;Integer&amp;gt; left = postorderTraversal(root.left);
        List&amp;lt;Integer&amp;gt; right = postorderTraversal(root.right);
        //Conquer
        result.addAll(left);
        result.addAll(right);
        result.add(root.val);

        return result;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Solution and Analysis&lt;/h2&gt;
&lt;p&gt;三种做法：1.非递归（推荐） 2.递归：遍历 3.递归：分治法&lt;/p&gt;
&lt;h3&gt;递归：遍历&lt;/h3&gt;
&lt;p&gt;运用遍历的方法&lt;/p&gt;
&lt;p&gt;先左再右最后中&lt;/p&gt;
&lt;h3&gt;递归：分治法&lt;/h3&gt;
&lt;p&gt;运用分治法，这是大多数树问题均可使用的办法&lt;/p&gt;
&lt;p&gt;分为左子树和右子树，不断地减小问题的规模&lt;/p&gt;
&lt;h3&gt;非递归&lt;/h3&gt;
&lt;p&gt;这应该是三种遍历方式中非递归实现最难的一道题目，有用两个栈实现与用一个栈实现两种方式，下面的参考资料讲得实在是太好了&lt;/p&gt;
&lt;p&gt;reference：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.geeksforgeeks.org/iterative-postorder-traversal"&gt;Iterative Postorder Traversal | Set 1 (Using Two Stacks)&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;算法流程：
1.1 Create two empty stacks s1 and s2, push root into s1
2.1 Do following while stack s1 is not empty
    a) Pop node from s1, and push this node into s2
    b) If the left child of node is not NULL, push node.left into s1
    c) If the right child of node is not NULL, push node.right into s1
2.2 Do following while stach s2 is not empty
    Pop node from s2, and add it into result
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.geeksforgeeks.org/iterative-postorder-traversal-using-stack"&gt;Iterative Postorder Traversal | Set 2 (Using One Stack)&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;算法流程：
1.1 Create an empty stack
2.1 Do following while root is not NULL
    a) Push root&amp;#39;s right child and then root to stack.
    b) Set root as root&amp;#39;s left child.
2.2 Pop an item from stack and set it as root.
    a) If the popped item has a right child and the right child 
       is at top of stack, then remove the right child from stack,
       push the root back and set root as root&amp;#39;s right child.
    b) Else print root&amp;#39;s data and set root as NULL.
2.3 Repeat steps 2.1 and 2.2 while stack is not empty.
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Algorithm Binary Tree"></category></entry><entry><title>Binary Tree Preorder Traversal</title><link href="http://www.zhangge208.com/pages/2015/12/15/binary-tree-preorder-traversal.html" rel="alternate"></link><updated>2015-12-15T00:00:00+08:00</updated><author><name>zhangge208</name></author><id>tag:www.zhangge208.com,2015-12-15:pages/2015/12/15/binary-tree-preorder-traversal.html</id><summary type="html">&lt;hr /&gt;
&lt;h1&gt;Binary Tree Preorder Traversal&lt;/h1&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given a binary tree, return the preorder traversal of its nodes' values.&lt;/p&gt;
&lt;p&gt;For example:
Given binary tree {1,#,2,3},&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;　　1
 　　\
  　　2
 　　/
　　3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;return [1,2,3].&lt;/p&gt;
&lt;p&gt;Note: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;version 1：Non-recurison
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; preorderTraversal(TreeNode root) {
        Stack&amp;lt;TreeNode&amp;gt; stack = new Stack&amp;lt;TreeNode&amp;gt;();
        List&amp;lt;Integer&amp;gt; preorder = new ArrayList&amp;lt;Integer&amp;gt;();

        if (root == null){
            return preorder;
        }

        stack.push(root);

        while (!stack.empty()){
            TreeNode node = stack.pop();
            preorder.add(node.val);

            if (node.right != null){
                stack.push(node.right);
            }
            if (node.left != null){
                stack.push(node.left);
            }
        }
        return preorder;
    }
}

version 2：Traverse
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; preorderTraversal(TreeNode root) {
        ArrayList&amp;lt;Integer&amp;gt; preorder = new ArrayList&amp;lt;Integer&amp;gt;();
        traverse(root,preorder);
        return preorder;
    }
    private void traverse(TreeNode root, ArrayList&amp;lt;Integer&amp;gt;preorder){
        if (root == null){
            return ;
        }

        preorder.add(root.val);
        traverse(root.left,preorder);
        traverse(root.right, preorder);

    }
}

version 3：Divide &amp;amp; Conquer
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List&amp;lt;Integer&amp;gt; preorderTraversal(TreeNode root) {
        ArrayList&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
        if (root == null){
            return result;
        }
        //Divide &amp;amp; Conquer

        //Divide
        ArrayList&amp;lt;Integer&amp;gt; left = preorderTraversal(root.left);
        ArrayList&amp;lt;Integer&amp;gt; right = preorderTraversal(root.right);

        //Conquer
        result.add(root.val);
        result.addAll(left);
        result.addAll(right);
        return result;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Solution and Analysis&lt;/h2&gt;
&lt;p&gt;三种做法：1.非递归（推荐） 2.递归：遍历 3.递归：分治法&lt;/p&gt;
&lt;h3&gt;非递归&lt;/h3&gt;
&lt;p&gt;运用栈和迭代。值得注意的是，左右节点入栈的先后顺序，栈是先入后出的数据结构，为保证是前序遍历，所以右节点先入栈，然后左节点。&lt;/p&gt;
&lt;h3&gt;递归：遍历&lt;/h3&gt;
&lt;p&gt;运用遍历的方法&lt;/p&gt;
&lt;p&gt;先根再左最后右&lt;/p&gt;
&lt;h3&gt;递归：分治法&lt;/h3&gt;
&lt;p&gt;运用分治法，这是大多数树问题均可使用的办法&lt;/p&gt;
&lt;p&gt;分为左子树和右子树，不断地减小问题的规模&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note：&lt;/strong&gt;
          (1)容器中addAll方法的使用，把一个容器中的所有元素加入到另一个容器的后面。&lt;/p&gt;
&lt;p&gt;(2)记得对于边界条件的处理、异常处理。&lt;/p&gt;</summary><category term="Algorithm Binary Tree"></category></entry></feed>